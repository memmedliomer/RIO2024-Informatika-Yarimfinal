#include <bits/stdc++.h>
#define ll long long
#define in insert
#define pb push_back
#define vl vector<ll>
#define fi first
#define se second
#define all(v) v.begin(), v.end()
#define endl "\n"
using namespace std;
const int sz = 2e5+5;
const ll inf = 1000000;
ll a[sz], ptr[sz];
vl idx[sz];
struct Segtree{
    vl st;
    void init(ll n){
        st.assign(n << 2, inf);
    }
    void build(ll v, ll l, ll r){
        if(l > r){return ;}
        if(l == r){
                st[v] = a[l];
                return ;
        }
        ll m = (l + r) >> 1;
        build(v*2, l, m);
        build(v*2+1, m+1, r);
        st[v] = min(st[v*2], st[v*2+1]);
    }
    ll get(ll v, ll tl, ll tr, ll l, ll r){
        if(tl > r || tr < l){return inf;}
        if(tl >= l && tr <= r){return st[v];}
        ll tm = (tl + tr) >> 1;
        return min(get(v*2, tl, tm, l, r), get(v*2+1, tm+1, tr, l, r));
    }
};
int main()
{
    Segtree st;
    ll n, i, j;
    cin >> n;
    st.init(n);
    vl v;
    map<ll,ll> mp, rmp;
    for(i = 1; i <= n; i++){
        cin >> a[i];
        v.pb(a[i]);
    }
    sort(all(v));
    ll c = 0;
    for(i = 0; i < v.size(); i++){
        if(mp[v[i]]){continue;}
        mp[v[i]] = ++c;
        rmp[c] = v[i];
    }
    for(i = 1; i <= n; i++){
        a[i] = mp[a[i]];
        idx[a[i]].pb(i);
    }
    st.build(1, 1, n);
    vector<array<ll, 3>> ans;
    for(i = 1; i <= c; i++){
        if(!rmp[i]){continue;}
        ll left = idx[i][0];
        for(j = 1; j < idx[i].size(); j++){
            
            ll ask = st.get(1, 1, n, left, idx[i][j]);
            if(ask < i){
                ans.pb({rmp[i], left, idx[i][j - 1]});
                left = idx[i][j];
            }
        }
        ans.pb({rmp[i], left, idx[i].back()});
       
    }
    cout << ans.size() << endl;
    for(i = 0; i < ans.size(); i++){
        cout << ans[i][1] << ' ' << ans[i][2] << ' ' << ans[i][0] << endl;
    }
}
